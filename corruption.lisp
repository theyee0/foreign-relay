(in-package #:corruption)

;; Letter Similarity Matrix, from Boles' and Clifford's 1989 paper
;; Boles, D.B., Clifford, J.E. An upper- and lowercase alphabetic similarity matrix, with derived generation similarity values. Behavior Research Methods, Instruments, & Computers 21, 579â€“586 (1989). https://doi.org/10.3758/BF03210580
;; Letters are ordered A-Za-z
(defparameter +letter-similarity+
  `((467 225 225 242 216 275 216 266 175 208 242 192 233 275 216 275 208 292 200 200 275 266 200 233 242 167 225 142 175 158 158 175 117 258 125 133 150 158 167 192 150 167 167 167 133 192 167 167 175 125 150 133)
    (242 500 250 333 292 283 275 225 242 183 250 225 200 175 292 350 208 350 275 200 225 175 150 192 233 158 142 275 167 200 192 158 175 192 142 150 142 150 133 125 192 216 175 158 183 158 142 142 133 117 158 142)
    (250 258 467 258 258 167 342 192 200 225 208 225 208 167 383 216 325 208 275 208 308 225 183 183 175 216 158 225 458 258 242 150 142 175 133 200 125 142 133 183 216 158 167 216 133 133 225 200 125 125 150 142)
    (233 350 308 483 308 225 308 225 225 233 183 225 216 225 342 292 292 225 167 216 250 208 175 183 183 200 125 258 242 242 192 125 158 183 125 183 133 200 183 183 192 175 175 142 133 125 192 142 133 117 158 133)
    (200 316 316 266 492 342 216 225 225 216 233 275 275 242 192 308 183 275 300 242 242 167 242 225 175 292 158 167 208 117 250 192 142 150 142 133 183 183 175 167 133 167 125 133 216 167 167 150 175 158 150 192)
    (250 258 208 242 392 500 225 216 242 175 250 242 225 216 183 350 192 316 192 250 192 167 175 158 192 225 133 158 183 142 150 366 125 208 192 150 158 175 158 158 150 208 150 200 142 192 133 133 150 117 133 158)
    (258 233 292 250 292 233 500 233 200 200 192 200 200 167 366 216 350 216 275 200 216 183 200 175 175 225 167 225 266 200 225 150 216 142 150 150 117 133 175 167 192 183 192 183 158 167 200 150 133 125 150 133)
    (275 225 175 208 292 250 208 500 292 216 250 308 233 275 167 283 200 208 208 233 242 250 258 250 225 242 125 192 150 175 142 158 158 333 175 150 208 200 175 216 133 133 158 158 133 142 192 125 200 175 192 200)
    (175 233 216 200 250 292 200 250 500 300 250 266 208 200 233 258 183 225 183 316 242 192 200 175 208 183 133 175 142 167 133 183 117 200 292 167 192 417 150 175 125 175 158 158 150 192 117 142 142 125 117 125)
    (208 225 266 208 250 200 208 192 275 500 233 225 208 200 233 233 225 233 200 258 258 242 200 167 283 175 125 158 175 175 150 225 175 158 158 358 183 242 142 158 158 192 125 175 158 258 142 216 150 133 233 150)
    (233 208 208 200 250 200 183 233 233 183 475 266 225 266 183 183 208 275 183 216 192 258 216 350 216 233 125 175 133 150 133 183 133 183 125 142 417 200 158 158 142 117 142 192 133 150 158 192 125 275 150 175)
    (208 225 266 275 300 275 208 258 275 292 225 500 216 242 183 216 192 216 167 258 325 225 216 192 225 225 133 200 192 158 150 150 133 192 158 175 258 266 117 150 125 142 125 175 133 167 183 175 142 133 158 175)
    (250 192 175 200 225 200 183 242 250 167 216 242 475 350 200 208 183 225 208 216 216 216 366 250 167 216 142 167 150 133 142 133 125 200 142 142 200 183 350 225 133 125 125 200 150 133 158 200 283 167 142 167)
    (216 216 200 225 200 192 208 233 216 233 275 216 342 500 216 183 216 233 192 242 242 242 258 308 233 333 133 158 158 125 133 117 133 250 158 125 225 208 200 325 125 133 125 158 150 133 183 175 225 208 167 292)
    (242 275 366 300 242 208 350 208 192 250 216 183 158 208 500 225 383 233 208 183 375 208 192 167 175 233 192 250 275 216 216 150 167 175 158 183 133 167 142 150 425 192 200 175 158 150 250 183 142 158 158 158)
    (275 316 225 283 275 333 275 233 250 258 225 266 183 200 275 500 242 358 275 208 225 175 183 216 233 242 167 283 208 258 216 258 192 192 183 183 150 183 142 125 242 392 308 242 158 150 183 125 133 142 142 167)
    (216 233 333 292 200 216 316 175 167 242 192 150 192 208 350 216 500 216 266 208 308 167 216 175 183 216 158 150 208 192 158 117 167 142 117 158 158 175 117 158 316 167 216 175 150 167 233 133 133 125 167 158)
    (266 292 275 216 258 266 233 258 242 200 300 208 216 200 233 408 216 492 242 200 233 167 200 242 175 242 167 208 208 200 167 192 175 158 133 167 242 142 158 150 167 275 158 233 158 150 158 158 117 175 133 167)
    (192 258 258 192 233 200 208 192 133 183 183 183 158 183 250 275 216 266 500 192 208 142 183 258 208 325 216 175 225 150 183 158 216 175 133 133 133 158 133 150 167 158 142 192 433 150 142 142 150 125 167 242)
    (225 266 216 225 242 292 175 266 292 283 258 250 200 242 183 250 200 250 158 500 216 192 167 167 233 208 142 150 133 175 142 208 117 175 208 142 142 292 167 175 150 142 142 175 142 300 125 158 158 117 150 142)
    (258 225 342 250 242 216 250 258 225 333 216 250 250 266 342 216 258 208 216 192 500 383 308 216 258 242 133 183 258 183 133 150 133 216 133 225 192 216 200 258 250 142 142 167 142 133 417 342 258 142 275 142)
    (233 142 225 200 208 175 192 208 216 200 167 200 266 225 233 208 183 167 192 192 350 500 242 275 342 208 125 142 192 158 150 142 125 192 142 158 192 158 150 183 167 133 133 150 167 158 350 408 250 233 250 150)
    (208 200 150 200 242 192 200 258 183 167 225 233 333 283 175 225 192 225 175 216 292 333 492 266 250 216 117 167 133 142 142 133 133 142 150 142 233 192 233 175 133 108 142 167 158 150 292 266 425 192 175 150)
    (250 183 200 167 208 183 167 292 200 167 325 200 242 308 175 175 167 192 192 200 208 300 242 500 308 242 108 133 167 150 125 133 117 142 133 108 275 125 150 175 133 125 133 142 142 150 208 250 200 400 200 175)
    (216 183 233 192 150 200 158 250 192 225 225 167 242 208 200 266 175 208 175 266 300 375 275 275 500 175 125 125 216 142 142 167 167 208 142 175 167 216 150 167 142 150 167 183 125 200 258 283 200 158 316 125)
    (183 242 167 200 258 275 225 183 216 183 175 233 216 316 216 183 192 200 258 225 233 192 183 192 175 500 167 125 158 133 142 142 125 117 142 142 142 150 150 158 133 117 125 167 242 142 150 133 167 167 133 442)
    (250 175 150 150 142 125 125 125 108 167 108 125 133 158 158 175 150 125 158 117 142 150 125 125 117 142 500 266 233 233 292 200 242 183 200 158 133 158 250 225 300 225 242 225 258 192 192 200 200 167 150 242)
    (150 250 175 216 167 133 208 175 167 183 142 200 142 158 225 258 208 192 142 167 158 150 125 125 150 133 225 500 292 350 225 183 266 342 175 167 250 225 167 225 283 350 375 225 233 200 250 192 150 150 216 150)
    (133 216 366 158 225 158 216 175 133 150 158 175 158 117 233 200 175 158 208 150 275 192 183 150 200 150 283 242 483 242 300 142 258 258 158 216 158 133 200 308 342 250 242 292 275 200 325 292 208 167 258 233)
    (158 167 183 242 167 167 150 133 175 183 150 167 150 158 158 250 167 183 167 167 183 142 150 150 158 133 216 383 225 500 208 208 375 333 183 208 225 216 175 167 266 333 350 233 183 242 233 200 158 158 216 150)
    (150 158 167 158 266 158 258 133 117 150 125 133 125 117 208 183 167 150 216 125 167 192 150 167 125 167 375 308 325 250 483 208 300 183 158 175 175 142 192 233 325 283 242 308 283 200 266 192 183 183 158 250)
    (233 167 158 158 167 350 158 158 183 208 150 150 142 183 133 283 125 150 150 208 167 133 108 150 142 133 200 175 208 192 216 500 250 208 192 250 167 225 167 183 142 183 175 225 175 300 167 216 175 150 183 175)
    (125 150 167 150 142 150 225 133 125 158 133 142 142 117 192 192 175 175 175 125 150 117 125 150 150 125 325 325 266 275 233 200 500 216 175 266 208 175 225 208 258 316 417 175 233 200 208 183 167 175 383 158)
    (175 175 183 175 142 158 183 308 167 175 233 216 183 242 208 192 192 175 133 208 225 192 142 158 175 158 183 316 233 283 216 192 167 500 192 225 333 192 242 325 183 266 183 342 150 208 308 250 142 150 266 175)
    (125 125 125 125 167 158 125 150 333 158 150 200 133 150 133 133 158 142 150 233 167 117 133 133 158 133 167 142 167 183 150 192 200 175 467 358 175 392 200 208 183 183 142 192 183 266 216 183 158 158 192 175)
    (167 133 208 133 158 158 158 175 216 400 183 175 133 150 150 142 133 175 150 192 183 192 142 133 175 158 175 183 225 208 167 275 283 200 350 500 175 266 167 208 192 250 192 258 208 308 233 250 167 183 225 200)
    (125 142 158 142 192 167 117 150 183 142 450 233 158 192 133 158 150 200 142 142 175 167 192 258 192 158 158 266 200 216 150 158 167 325 175 150 500 192 183 150 142 208 150 208 175 183 175 233 200 366 242 183)
    (150 167 183 216 233 183 150 225 400 233 192 242 200 183 133 200 158 167 142 342 175 208 183 142 183 167 158 208 125 225 158 283 158 208 366 208 225 500 142 167 142 158 158 167 175 300 158 142 142 167 150 158)
    (167 150 133 150 192 183 142 167 133 125 150 125 316 200 150 133 100 133 133 158 150 142 192 142 150 142 200 175 225 192 208 200 216 216 192 133 167 167 500 375 225 200 167 300 192 183 233 208 316 233 183 250)
    (208 175 175 183 117 158 167 183 142 158 133 133 192 283 183 158 183 142 133 133 208 183 167 142 183 133 242 216 350 225 216 192 183 358 192 216 133 133 375 500 242 216 216 308 175 175 333 225 233 175 233 208)
    (150 158 250 200 125 133 167 117 117 150 150 125 117 125 442 242 375 150 175 133 216 142 142 158 142 125 250 308 316 316 325 150 233 208 200 216 158 133 225 250 500 333 258 192 233 158 333 283 167 150 200 158)
    (125 158 158 167 125 183 175 125 125 133 117 167 150 125 216 433 192 208 142 158 133 167 150 117 150 142 258 350 258 300 250 183 325 242 200 216 183 150 175 216 300 500 408 266 233 216 200 183 233 158 258 216)
    (133 150 167 192 150 125 142 125 125 150 150 158 125 142 192 275 233 208 133 175 117 125 117 117 158 108 216 342 266 383 208 192 467 258 158 167 175 200 167 225 242 408 500 208 183 183 216 183 183 158 258 175)
    (192 125 233 125 175 183 167 150 142 175 167 158 167 175 133 225 108 233 142 175 150 192 142 158 175 150 250 242 283 283 275 275 242 333 208 233 167 125 266 300 266 316 225 500 216 266 258 200 183 242 216 200)
    (125 167 158 125 225 175 142 142 125 142 117 117 158 150 158 158 150 158 400 142 133 158 158 142 133 258 258 167 292 225 292 208 216 158 192 175 133 125 225 233 200 258 192 208 483 200 208 192 242 242 192 308)
    (125 167 175 125 142 175 133 175 167 192 175 167 125 150 117 175 117 150 142 316 183 167 167 158 175 183 158 258 208 225 150 342 208 200 200 233 233 300 200 200 192 192 158 192 183 467 192 233 167 183 192 216)
    (158 175 216 216 142 133 175 192 142 258 158 183 150 192 200 158 183 133 142 125 400 325 242 167 283 167 283 183 316 225 266 183 225 316 192 266 200 183 225 333 292 208 216 275 200 192 442 400 366 208 400 225)
    (192 158 192 133 125 133 158 150 142 200 167 142 175 175 183 133 158 125 125 150 333 450 250 225 292 150 150 183 292 175 192 167 192 225 175 225 200 167 175 266 250 183 200 258 208 183 400 500 308 283 325 242)
    (150 158 142 133 233 150 150 167 158 150 125 150 283 208 142 133 117 142 133 125 225 242 392 158 175 125 175 150 216 150 167 175 183 208 192 175 150 167 350 275 150 167 175 183 242 183 333 325 500 192 242 258)
    (133 133 142 117 158 100 125 150 150 133 283 158 150 125 108 125 125 125 133 133 133 200 175 433 167 158 208 167 225 158 208 142 175 183 192 158 392 142 200 175 167 158 200 200 175 183 225 258 183 500 175 258)
    (167 158 158 150 158 125 167 200 133 208 192 150 158 142 192 158 150 125 142 142 250 216 167 216 300 167 233 250 216 250 216 175 366 250 175 266 216 158 216 225 208 233 275 225 216 192 358 350 258 233 500 192)
    (142 133 158 133 150 208 142 158 142 125 167 175 183 275 125 142 142 158 208 142 158 158 175 167 125 442 250 183 283 133 292 158 192 183 192 158 200 142 192 233 175 192 167 258 333 183 233 175 266 242 233 500)))

;(defconstant +letter-similarity-scaling+ 0.03)
(defparameter +letter-list+ "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")

(defconstant +character-corruption-probability+ 0.1)
(defparameter +character-list+ "abcdefghijklmnopqrstuvwxyz.,!?-+_=")
(defconstant +max-dropped-sections+ 3)
(defconstant +max-scrambled-section-length+ 10)
(defconstant +max-scrambled-sections+ 5)

(defun select-subsection (left right random-state)
  "Select a random pair of numbers l, r such that left <= l <= r < right"
  (let* ((delta (- right left))
         (random-left (+ (random delta random-state) left))
         (ndelta (- right random-left))
         (random-right (+ (random ndelta random-state) random-left)))
    (list random-left random-right)))

(defun drop-section (string left right)
  "Delete the subsequence of a string on [left, right)"
  (nconc (subseq string 0 left) (nthcdr right string)))

(defun drop-sections (string random-state)
  "Delete a random number of subsequences of random length from a string"
  (labels ((drop-n-sections (string n random-state)
             (if (= n 0)
                 string
                 (drop-n-sections (apply #'drop-section string
                                         (select-subsection 0 (list-length string) random-state))
                                  (1- n)
                                  random-state))))
    (let ((dropped-sections (random +max-dropped-sections+ random-state)))
      (drop-n-sections string dropped-sections random-state))))

(defun corrupt-character (character random-state)
  "Generate a random corruption of a given character that is not equal"
  (let ((rand-char (char +character-list+ (random (length +character-list+) random-state))))
    (if (char= rand-char character)
        (corrupt-character character random-state))
        rand-char))

(defun corrupt-characters (string random-state)
  "Randomly corrupt the characters in a string"
  (if (not string)
      nil
      (let ((random-probability (random 1.0 random-state)))
        (cons (if (< random-probability +character-corruption-probability+)
                  (corrupt-character (car string) random-state)
                  (car string))
              (corrupt-characters (cdr string) random-state)))))

(defun reverse-section (string left right)
  "Reverse the subsequence of string on [left, right)"
  (nconc (subseq string 0 left)
         (reverse (subseq string left right))
         (nthcdr right string)))

(defun scramble-sections (string random-state)
  "Reverse a random number of subsequences of random length in a string to scramble its characters"
  (labels ((scramble-n-sections (string n random-state)
             (if (= n 0)
                 string
                 (scramble-n-sections (apply #'reverse-section string
                                             (select-subsection 0 (list-length string) random-state))
                                      (1- n)
                                      random-state))))
    (let ((scrambled-sections (random +max-scrambled-sections+ random-state)))
      (scramble-n-sections string scrambled-sections random-state))))

(defun writing-probability (character letter-scaling-factor)
  "Given a letter, return a probability of a given number being found.
Letter similarities are scaled by `letter-scaling-factor` to
reduce magnitude, then scaled exponentially to prioritize
more similar characters. Finally, all results are normalized.
`letter-scaling-factor` cannot be too high, otherwise EXP
will overflow the floating point range"
  (let ((values (map 'list (lambda (x) (exp (* x letter-scaling-factor)))
                     (car (nthcdr (position character +letter-list+) +letter-similarity+)))))
    (map 'list (lambda (x) (/ x (reduce #'+ values))) values)))

(defun get-probability (value probability-list)
  "Return the index of the first prefix sum of a list greater than some value"
  (labels ((get-probability-index (value probability-list n)
             (if (< (- value (car probability-list)) 0.000001) ; Overcome imprecision in float
                 n
                 (get-probability-index (- value (car probability-list)) (cdr probability-list) (1+ n)))))
    (get-probability-index value probability-list 0)))

(defun corrupt-writing (string letter-scaling-factor random-state)
  "Corrupt a string with letters that are similar in appearance"
  (let ((character-list (coerce string 'list)))
    (coerce (map 'list
                 (lambda (x)
                   (if (find x +letter-list+)
                       (char +letter-list+ (get-probability (random 1.0 random-state) (writing-probability x letter-scaling-factor)))
                       x))
                 character-list)
            'string)))


(defun corrupt-string (string random-state)
  "Given a string, return a corrupted version"
  (let* ((character-list (coerce string 'list))
         (scrambled-sections (scramble-sections character-list random-state))
         (dropped-sections (drop-sections scrambled-sections random-state))
         (corrupted-characters (corrupt-characters dropped-sections random-state)))
    (coerce corrupted-characters 'string)))
